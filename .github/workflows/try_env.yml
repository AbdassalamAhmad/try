# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  #push:
    #branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      myInput:
        description: "first OR second"
        required: true
        default: apply
        type: choice
        options:
        - first
        - second

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS User Credentials.
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS User Credentials.
  EC2_PRIVATE_SSH_KEY: ${{ secrets.AWS_EC2_SSH_PRIVATE_KEY }} # Used to ssh into EC2.
  EC2_PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_PUBLIC_KEY }} # Used to upload public key to aws.
  AWS_REGION: us-east-1

jobs:
  build:
    runs-on: ubuntu-latest
    outputs: # used to reference in later job
      BASTION_PUBLIC_IP: ${{ steps.get-public-ip.outputs.bastion_public_ip}}

    env:
      TF_VAR_ami: ${{ secrets.TF_VAR_AMI }}
    steps:
    - uses: actions/checkout@v3
    - run: terraform init
    #- run: terraform plan
    - name: Terraform Apply
      run: |
        terraform apply \
        -var="public_key=$EC2_PUBLIC_SSH_KEY" \
        -var="key_name=bastion" \
        -auto-approve
    # - name: Terraform ${{ inputs.myInput }}
    #   run: terraform ${{ inputs.myInput }} -auto-approve
    
    - name: Set Output 1
      id: get-public-ip
      run: echo "bastion_public_ip=$(terraform output bastion_public_ip)" >> $GITHUB_OUTPUT # new way of outputs
    

  docker-build-push:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v3

    - name: set public IP to env variables
      run: echo BASTION_PUBLIC_IP=${{ needs.build.outputs.BASTION_PUBLIC_IP }} >> $GITHUB_ENV

    - name: Login to AWS ECR Public
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v1    
      with:
        registry-type: public
    
    - name: Build and push docker image
      env:
        REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
        REGISTRY_ALIAS: g4x4w1s3
        REPOSITORY: abc
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
      working-directory: ./Monty_Hall_Game_Flask_App

 
 
    - name: Deploy docker image to EC2
      if: ${{ inputs.myInput }} == "first"
      env:
        REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
        REGISTRY_ALIAS: g4x4w1s3
        REPOSITORY: abc
        IMAGE_TAG: ${{ github.sha }}
        AWS_DEFAULT_REGION: us-east-1

      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.BASTION_PUBLIC_IP }}
        username: ec2-user
        key: ${{ env.EC2_PRIVATE_SSH_KEY }}
        envs: EC2_PRIVATE_SSH_KEY,REGISTRY,REGISTRY_ALIAS,REPOSITORY,IMAGE_TAG,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_DEFAULT_REGION,AWS_REGION
        script: |-
          sudo yum update -y
          sudo amazon-linux-extras install docker -y
          sudo service docker start
          sudo docker pull $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG &&
          sudo docker run -d --name ECR-Container -p 80:5000 $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG







    - name: Deploy docker image to EC2
      if: ${{ inputs.myInput }} == "second"
      env:
        REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
        REGISTRY_ALIAS: g4x4w1s3
        REPOSITORY: abc
        IMAGE_TAG: ${{ github.sha }}
        AWS_DEFAULT_REGION: us-east-1

      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.BASTION_PUBLIC_IP }}
        username: ec2-user
        key: ${{ env.EC2_PRIVATE_SSH_KEY }}
        
        script: |-
          sudo yum update -y
          sudo amazon-linux-extras install docker -y
          sudo service docker start
          sudo docker ps -aq | sudo xargs docker stop | sudo xargs docker rm &&
          sudo docker pull $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
          sudo docker run -d --name ECR-Container -p 80:5000 $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG

# sudo docker stop ECR-Container || true
# sudo docker rm ECR-Container || true



